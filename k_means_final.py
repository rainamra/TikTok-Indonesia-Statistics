# -*- coding: utf-8 -*-
"""K_means_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCApFIm_x6HwZuNrJy8SbpTu_Wig5bds
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

df = pd.read_csv("combined_all_things.csv")
df.info()

df['engagement_comments'] = (df['n_comments']/df['n_plays'])*100
df.info()

df.head()

x_comments = df.iloc[:,17:18]
print(x_comments)

#elbow method
wcss = []
for i in range(1,11):
    k_means = KMeans(n_clusters=i,init='k-means++', random_state=365)
    k_means.fit(x_comments)
    wcss.append(k_means.inertia_)
#plot elbow curve
plt.plot(np.arange(1,11),wcss)
plt.xlabel('Clusters')
plt.ylabel('SSE')
plt.show()

k_means_optimum = KMeans(n_clusters = 5, init = 'k-means++',  random_state=365)
y_comments = k_means_optimum.fit_predict(x_comments)
df['cluster_comments'] = y_comments

data1 = df[df.cluster_comments==0]
data2 = df[df.cluster_comments==1]
data3 = df[df.cluster_comments==2]
data4 = df[df.cluster_comments==3]
data5 = df[df.cluster_comments==4]

plt.scatter(data1['engagement_comments'], data1['engagement_comments'], label="poor")
plt.scatter(data2['engagement_comments'], data2['engagement_comments'], label="good")
plt.scatter(data3['engagement_comments'], data3['engagement_comments'], label="normal")
plt.scatter(data4['engagement_comments'], data4['engagement_comments'], label="very good")
plt.scatter(data5['engagement_comments'], data5['engagement_comments'], label="average")
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
score = silhouette_score(x_comments,y_comments)
print(score)

"""## **FOR LIKES**"""

df['engagement_likes'] = (df['n_likes']/df['n_plays'])*100
df.info()

x_likes = df.iloc[:,19:20]
print(x_likes)

#elbow method
wcss = []
for i in range(1,11):
    k_means = KMeans(n_clusters=i,init='k-means++', random_state=365)
    k_means.fit(x_likes)
    wcss.append(k_means.inertia_)
#plot elbow curve
plt.plot(np.arange(1,11),wcss)
plt.xlabel('Clusters')
plt.ylabel('SSE')
plt.show()

k_means_optimum = KMeans(n_clusters = 4, init = 'k-means++',  random_state=365)
y_likes = k_means_optimum.fit_predict(x_likes)
df['cluster_likes'] = y_likes

data1 = df[df.cluster_likes==0]
data2 = df[df.cluster_likes==1]
data3 = df[df.cluster_likes==2]
data4 = df[df.cluster_likes==3]
data5 = df[df.cluster_likes==4]

plt.scatter(data1['engagement_likes'], data1['engagement_likes'], label="poor")
plt.scatter(data2['engagement_likes'], data2['engagement_likes'], label="good")
plt.scatter(data3['engagement_likes'], data3['engagement_likes'], label="normal")
plt.scatter(data4['engagement_likes'], data4['engagement_likes'], label="very good")
plt.scatter(data5['engagement_likes'], data5['engagement_likes'], label="average")
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
score = silhouette_score(x_likes,y_likes)
print(score)

"""## **FOR SHARE**"""

df['engagement_shares'] = (df['n_shares']/df['n_plays'])*100
df.info()

x_shares = df.iloc[:,21:22]
print(x_shares)

#elbow method
wcss = []
for i in range(1,11):
    k_means = KMeans(n_clusters=i,init='k-means++', random_state=365)
    k_means.fit(x_shares)
    wcss.append(k_means.inertia_)
#plot elbow curve
plt.plot(np.arange(1,11),wcss)
plt.xlabel('Clusters')
plt.ylabel('SSE')
plt.show()

k_means_optimum = KMeans(n_clusters = 3, init = 'k-means++',  random_state=365)
y_shares = k_means_optimum.fit_predict(x_shares)
df['cluster_shares'] = y_shares

data1 = df[df.cluster_shares==0]
data2 = df[df.cluster_shares==1]
data3 = df[df.cluster_shares==2]

plt.scatter(data1['engagement_shares'], data1['engagement_shares'], label="poor")
plt.scatter(data2['engagement_shares'], data2['engagement_shares'], label="good")
plt.scatter(data3['engagement_shares'], data3['engagement_shares'], label="normal")
#plt.scatter(data4['engagement_likes'], data4['engagement_likes'], label="very good")
#plt.scatter(data5['engagement_likes'], data5['engagement_likes'], label="average")
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
score = silhouette_score(x_shares,y_shares)
print(score)